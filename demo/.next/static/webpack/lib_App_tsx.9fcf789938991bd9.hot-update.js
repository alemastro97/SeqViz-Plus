"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("lib_App_tsx",{

/***/ "../src/SelectionHandler.tsx":
/*!***********************************!*\
  !*** ../src/SelectionHandler.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SelectionHandler; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_class_call_check_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_class_call_check.mjs */ \"./node_modules/@swc/helpers/src/_class_call_check.mjs\");\n/* harmony import */ var _swc_helpers_src_inherits_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_inherits.mjs */ \"./node_modules/@swc/helpers/src/_inherits.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _swc_helpers_src_create_super_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_create_super.mjs */ \"./node_modules/@swc/helpers/src/_create_super.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _selectionContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectionContext */ \"../src/selectionContext.ts\");\n\n\n\n\n\n\n\nvar _PureComponent;\nvar SelectionHandler = /*#__PURE__*/ function(_superClass) {\n    \"use strict\";\n    (0,_swc_helpers_src_inherits_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(SelectionHandler, _superClass);\n    var _super = (0,_swc_helpers_src_create_super_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(SelectionHandler);\n    function SelectionHandler() {\n        (0,_swc_helpers_src_class_call_check_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, SelectionHandler);\n        var _this;\n        _this = _super.apply(this, arguments);\n        /** Only state is the selection range */ _this.state = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, _selectionContext__WEBPACK_IMPORTED_MODULE_1__.defaultSelection);\n        /* previous base cursor is over, used in circular drag select */ _this.previousBase = null;\n        /* directionality of drag (true if clockwise), used in circular drag select */ _this.forward = null;\n        /* full selection length, used in circular drag select */ _this.fullSelectionLength = 0;\n        /* is the user currently dragging across the surface of the seqViewer? this is tracked on SeqBlocks in particular (onMouseOver), used in circular drag select */ _this.dragEvent = false;\n        /* is there a selection already, used for shift-click catch up */ _this.selectionStarted = false;\n        /* was the last selection action a shift click, used for shift-click catch up */ _this.shiftSelection = false;\n        /* unix time of the last click (awful attempt at detecting double clicks) */ _this.lastClick = Date.now();\n        /** a map between the id of child elements and their associated SelectRanges */ _this.idToRange = new Map();\n        _this.componentDidMount = function() {\n            if (!document) return;\n            document.addEventListener(\"mouseup\", _this.stopDrag);\n        };\n        _this.componentWillUnmount = function() {\n            if (!document) return;\n            document.removeEventListener(\"mouseup\", _this.stopDrag);\n        };\n        /** Stop the current drag event from happening */ _this.stopDrag = function() {\n            _this.dragEvent = false;\n        };\n        /**\n   * Called at start of drag to make sure checkers are reset to default state\n   */ _this.resetCircleDragVars = function(start) {\n            _this.previousBase = start;\n            _this.forward = null;\n            _this.fullSelectionLength = 0;\n            _this.dragEvent = true; // start a drag event\n        };\n        /**\n   * a ref callback for mapping the id of child to its SelectRange\n   * it stores the id of all elements\n   **/ _this.inputRef = function(ref, selectRange) {\n            _this.idToRange.set(ref, (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n                ref: ref\n            }, selectRange));\n        };\n        /**\n   * remove the ref by ID.\n   */ _this.removeMountedBlock = function(ref) {\n            _this.idToRange.delete(ref);\n        };\n        /**\n   * the selected child element is something that is known by reference.\n   * update its SeqBlock's range (or any others affected) with the newly\n   * active range\n   */ _this.mouseEvent = function(e) {\n            var setCentralIndex = _this.props.setCentralIndex;\n            // should not be updating selection since it's not a drag event time\n            if ((e.type === \"mousemove\" || e.type === \"mouseup\") && !_this.dragEvent) {\n                return;\n            }\n            // storing this to figure out if it was a double click\n            var msSinceLastClick = Date.now() - _this.lastClick;\n            var knownRange = _this.dragEvent ? _this.idToRange.get(e.currentTarget.id) // only look for SeqBlocks\n             : _this.idToRange.get(e.target.id) || _this.idToRange.get(e.currentTarget.id); // elements and SeqBlocks\n            if (!knownRange) {\n                return; // there isn't a known range with the id of the element\n            }\n            knownRange = (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, knownRange), {\n                end: knownRange.end || 0,\n                start: knownRange.start || 0\n            });\n            var direction = knownRange.direction, end = knownRange.end, start = knownRange.start, viewer = knownRange.viewer;\n            switch(knownRange.type){\n                case \"ANNOTATION\":\n                case \"FIND\":\n                case \"TRANSLATION\":\n                case \"ENZYME\":\n                case \"HIGHLIGHT\":\n                    {\n                        if (viewer !== \"LINEAR\" && setCentralIndex) {\n                            // if an element was clicked on the circular viewer, scroll the linear\n                            // viewer so the element starts on the first SeqBlock\n                            setCentralIndex(\"LINEAR\", start || 0);\n                        }\n                        // Annotation or find selection range\n                        var clockwise = direction ? direction === 1 : true;\n                        var selectionStart = clockwise ? start : end;\n                        var selectionEnd = clockwise ? end : start;\n                        _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, knownRange), {\n                            clockwise: clockwise,\n                            end: selectionEnd,\n                            start: selectionStart\n                        }));\n                        _this.dragEvent = false;\n                        _this.lastClick = Date.now();\n                        break;\n                    }\n                case \"AMINOACID\":\n                    {\n                        // Annotation or find selection range\n                        var clockwise1 = direction ? direction === 1 : true;\n                        var selectionStart1 = clockwise1 ? start : end;\n                        var selectionEnd1 = clockwise1 ? end : start;\n                        // if they double clicked, select the whole translation\n                        // https://en.wikipedia.org/wiki/Double-click#Speed_and_timing\n                        if (msSinceLastClick < 300 && knownRange.parent) {\n                            knownRange = (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, knownRange.parent), {\n                                end: knownRange.parent.end || 0,\n                                start: knownRange.parent.start || 0\n                            });\n                            selectionStart1 = clockwise1 ? knownRange.start : knownRange.end;\n                            selectionEnd1 = clockwise1 ? knownRange.end : knownRange.start;\n                        }\n                        _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, knownRange), {\n                            clockwise: clockwise1,\n                            end: selectionEnd1,\n                            start: selectionStart1\n                        }));\n                        _this.dragEvent = false;\n                        _this.lastClick = Date.now();\n                        e.stopPropagation(); // necessary to stop a double click\n                        break;\n                    }\n                case \"SEQ\":\n                    {\n                        if (viewer === \"LINEAR\") {\n                            _this.handleLinearSeqEvent(e, (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, knownRange), {\n                                end: knownRange.end || 0,\n                                start: knownRange.start || 0\n                            }));\n                        } else if (viewer === \"CIRCULAR\") {\n                            _this.handleCircularSeqEvent(e);\n                        }\n                        break;\n                    }\n                default:\n            }\n        };\n        /**\n   * Handle a sequence selection on a linear viewer\n   */ _this.handleLinearSeqEvent = function(e, knownRange) {\n            var selection = _this.context;\n            var currBase = _this.calculateBaseLinear(e, knownRange);\n            var clockwiseDrag = selection.start !== null && currBase >= (selection.start || 0);\n            if (e.button === 0 && e.type === \"mousedown\" && currBase !== null) {\n                // this is the start of a drag event\n                _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, _selectionContext__WEBPACK_IMPORTED_MODULE_1__.defaultSelection), {\n                    clockwise: clockwiseDrag,\n                    end: currBase,\n                    start: e.shiftKey ? selection.start : currBase\n                }));\n                _this.dragEvent = true;\n            } else if (e.button === 0 && _this.dragEvent && currBase !== null) {\n                // continue a drag event that's currently happening\n                _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, _selectionContext__WEBPACK_IMPORTED_MODULE_1__.defaultSelection), {\n                    clockwise: clockwiseDrag,\n                    end: currBase,\n                    start: selection.start\n                }));\n            }\n        };\n        /**\n   * Handle a sequence selection event on the circular viewer\n   */ _this.handleCircularSeqEvent = function(e) {\n            var seq = _this.props.seq;\n            var selection = _this.context;\n            var start = selection.start;\n            var clockwise = selection.clockwise, end = selection.end;\n            var currBase = _this.calculateBaseCircular(e);\n            var seqLength = seq.length;\n            if (e.type === \"mousedown\") {\n                var selStart = e.shiftKey ? start || 0 : currBase;\n                var lookahead = e.shiftKey ? _this.calcSelectionLength(selStart, currBase, false) : _this.calcSelectionLength(selStart, currBase, true); // check clockwise selection length\n                _this.selectionStarted = lookahead > 0; // update check for whether there is a prior selection\n                _this.resetCircleDragVars(selStart); // begin drag event\n                _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, _selectionContext__WEBPACK_IMPORTED_MODULE_1__.defaultSelection), {\n                    clockwise: clockwise,\n                    end: currBase,\n                    ref: \"\",\n                    start: selStart,\n                    type: \"SEQ\"\n                }));\n            } else if (e.type === \"mousemove\" && _this.dragEvent && currBase && _this.previousBase && currBase !== _this.previousBase) {\n                var increased = currBase > _this.previousBase; // bases increased\n                var changeThreshold = seqLength * 0.9; // threshold for unrealistic change by mouse movement\n                var change = Math.abs(_this.previousBase - currBase); // index change from this mouse movement\n                var crossedZero = change > changeThreshold; // zero was crossed if base jumped more than changeThreshold\n                _this.forward = increased ? !crossedZero : crossedZero; // bases increased XOR crossed zero\n                var lengthChange = crossedZero ? seqLength - change : change; // the change at the point where we cross zero has to be normalized by seqLength\n                var sameDirectionMove = _this.forward === selection.clockwise || selection.clockwise === null; // moving in same direction as start of drag or start of drag\n                if (sameDirectionMove) {\n                    _this.fullSelectionLength += lengthChange;\n                } else {\n                    _this.fullSelectionLength -= lengthChange;\n                }\n                _this.previousBase = currBase; // done comparing with previous base, update previous base\n                if (_this.fullSelectionLength < seqLength * 0.01 && !_this.shiftSelection) {\n                    clockwise = _this.forward; // near selection start so selection direction is up for grabs\n                    var check = _this.calcSelectionLength(selection.start || 0, currBase, _this.forward); // check actual current selection length\n                    if (_this.fullSelectionLength < 0) {\n                        // This is to correct for errors when dragging too fast\n                        _this.fullSelectionLength = check;\n                    }\n                    if (check > _this.fullSelectionLength) {\n                        // the actual selection length being greater than additive selection\n                        // length means we have come back to start and want to go in opposite direction\n                        clockwise = !_this.forward;\n                    }\n                    end = currBase;\n                }\n                sameDirectionMove = _this.forward === selection.clockwise; // recalculate this in case we've switched selection directionality\n                // check the selection length, this is agnostic to the ALL reference and\n                // will always calculate from where you cursor is to the start of selection\n                var check1 = _this.calcSelectionLength(selection.start || 0, currBase, selection.clockwise || true);\n                if (_this.selectionStarted && _this.shiftSelection && check1 > _this.fullSelectionLength) {\n                    _this.fullSelectionLength = check1; // shift select catch up\n                }\n                // there is an ongoing drag in the same direction as the direction the selection started in\n                var sameDirectionDrag = _this.dragEvent && sameDirectionMove;\n                var fullSelection = false; // selection is full sequence\n                // TODO: fix const fullSelection = currRef === \"ALL\"; // selection is full sequence\n                var hitFullSelection = !fullSelection && _this.fullSelectionLength >= seqLength; // selection became full sequence\n                if (sameDirectionDrag && hitFullSelection) {\n                    end = start;\n                } else if (fullSelection) {\n                    // this ensures that backtracking doesn't require making up to your overshoot forward circles\n                    _this.fullSelectionLength = seqLength + _this.fullSelectionLength % seqLength;\n                    if (!sameDirectionDrag && // changed direction\n                    check1 === _this.fullSelectionLength - seqLength && // back tracking\n                    check1 > seqLength * 0.9 // passed selection start\n                    ) {\n                        end = currBase; // start decreasing selection size due to backtracking\n                        // reset calculated additive selection length to normal now that we are not at ALL length\n                        _this.fullSelectionLength = _this.fullSelectionLength - seqLength;\n                    }\n                } else {\n                    end = currBase; // nothing special just update the selection\n                }\n                _this.shiftSelection = false;\n                _this.setSelection((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, _selectionContext__WEBPACK_IMPORTED_MODULE_1__.defaultSelection), {\n                    clockwise: clockwise,\n                    end: end,\n                    start: start,\n                    type: \"SEQ\"\n                }));\n            }\n        };\n        /**\n   * in a linear sequence viewer, given the bounding box of a component, the basepairs\n   * by SeqBlock and the position of the mouse event, find the current base\n   */ _this.calculateBaseLinear = function(e, knownRange) {\n            var bpsPerBlock = _this.props.bpsPerBlock;\n            var block = e.currentTarget.getBoundingClientRect();\n            var distFromLeft = e.clientX - block.left;\n            var ratioFromLeft = distFromLeft / block.width;\n            var bpsFromLeft = Math.round(ratioFromLeft * bpsPerBlock);\n            return Math.min(knownRange.start + bpsFromLeft, knownRange.end);\n        };\n        /**\n   * in a circular plasmid viewer, given the center of the viewer, and position of the\n   * mouse event, find the currently hovered or clicked basepair\n   */ _this.calculateBaseCircular = function(e) {\n            var _props = _this.props, center = _props.center, centralIndex = _props.centralIndex, seq = _props.seq, yDiff = _props.yDiff;\n            if (!center) return 0;\n            var block = e.currentTarget.getBoundingClientRect();\n            // position on the plasmid viewer\n            var distFromLeft = e.clientX - block.left;\n            var distFromTop = e.clientY - block.top;\n            // position relative to center\n            var x = distFromLeft - center.x;\n            var y = distFromTop - (center.y + yDiff);\n            var riseToRun = y / x;\n            var posInRads = Math.atan(riseToRun);\n            var posInDeg = posInRads * (180 / Math.PI) + 90; // convert and shift to vertical is 0\n            if (x < 0) {\n                posInDeg += 180; // left half of the viewer\n            }\n            var posInPerc = posInDeg / 360; // position as a percentage\n            var currBase = Math.round(seq.length * posInPerc); // account for rotation of the viewer\n            currBase += centralIndex;\n            if (currBase > seq.length) {\n                currBase -= seq.length;\n            }\n            return currBase;\n        };\n        /**\n   * Update the selection in state. Only update the specified\n   * properties of the selection that should be updated.\n   */ _this.setSelection = function(newSelection) {\n            var selection = _this.context;\n            var setSelection = _this.props.setSelection;\n            if (newSelection.start === selection.start && newSelection.end === selection.end && newSelection.ref === selection.ref && // to support re-clicking the annotation and causing it to fire a la gh issue https://github.com/Lattice-Automation/seqviz/issues/142\n            [\n                \"SEQ\",\n                \"AMINOACID\",\n                \"\"\n            ].includes(newSelection.type || \"\")) {\n                return;\n            }\n            var ref = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, selection, newSelection), clockwise = ref.clockwise, end = ref.end, name = ref.name, ref1 = ref.ref, start = ref.start, type = ref.type;\n            var length = _this.calcSelectionLength(start, end, clockwise);\n            setSelection({\n                clockwise: clockwise,\n                end: end,\n                length: length,\n                name: name,\n                ref: ref1,\n                start: start,\n                type: type\n            });\n        };\n        /**\n   * Check what the length of the selection is in circle drag select\n   */ _this.calcSelectionLength = function(start, base, clock) {\n            var seq = _this.props.seq;\n            if (base < start && !clock) {\n                return start - base;\n            }\n            if (base > start && !clock) {\n                return start + (seq.length - base);\n            }\n            if (base > start && clock) {\n                return base - start;\n            }\n            if (base < start && clock) {\n                return seq.length - start + base;\n            }\n            return 0;\n        };\n        return _this;\n    }\n    var _proto = SelectionHandler.prototype;\n    _proto.render = function render() {\n        return this.props.children(this.inputRef, this.mouseEvent, this.removeMountedBlock);\n    };\n    return SelectionHandler;\n}(_PureComponent = react__WEBPACK_IMPORTED_MODULE_0__.PureComponent);\nSelectionHandler.displayName = \"WithSelectionHandler\";\nSelectionHandler.contextType = _selectionContext__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n/**\n * SelectionHandler handles sequence selection. Each click, drag, etc, is\n * noted and mapped to a sequence index.\n */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/SelectionHandler.tsx\n"));

/***/ })

});